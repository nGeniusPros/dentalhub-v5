{"version":3,"file":"redis.js","sourceRoot":"","sources":["../src/redis.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient } from 'redis';\nimport { InfrastructureError } from './errors/index.js';\n\ntype RedisClientType = ReturnType<typeof createClient>;\n\nexport class RedisClient {\n  private client: RedisClientType;\n  private connectionAttempts = 0;\n  private readonly MAX_RETRIES = 3;\n\n  constructor(private url: string) {\n    this.client = createClient({\n      url,\n      pingInterval: 30000, // 30 seconds\n    });\n\n    this.setupEventHandlers();\n  }\n\n  private setupEventHandlers(): void {\n    this.client.on('error', (err: Error) => {\n      throw new InfrastructureError('redis_connection', err, {\n        connectionUrl: this.url,\n        attempt: this.connectionAttempts\n      });\n    });\n\n    this.client.on('reconnecting', () => {\n      this.connectionAttempts++;\n      if (this.connectionAttempts > this.MAX_RETRIES) {\n        throw new InfrastructureError('redis_retry_limit', null, {\n          maxRetries: this.MAX_RETRIES\n        });\n      }\n    });\n  }\n\n  async connect(): Promise<RedisClientType> {\n    try {\n      await this.client.connect();\n      return this.client;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new InfrastructureError('redis_connect', error, {\n          connectionUrl: this.url\n        });\n      }\n      throw new InfrastructureError('redis_connect', null, {\n        connectionUrl: this.url,\n        error: String(error)\n      });\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    try {\n      await this.client.disconnect();\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new InfrastructureError('redis_disconnect', error, {\n          connectionUrl: this.url\n        });\n      }\n      throw new InfrastructureError('redis_disconnect', null, {\n        connectionUrl: this.url,\n        error: String(error)\n      });\n    }\n  }\n\n  async healthCheck(): Promise<boolean> {\n    try {\n      const ping = await this.client.ping();\n      return ping === 'PONG';\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new InfrastructureError('redis_healthcheck', error);\n      }\n      throw new InfrastructureError('redis_healthcheck', null, {\n        error: String(error)\n      });\n    }\n  }\n}\n\nexport function createRedisClient(url: string): RedisClient {\n  return new RedisClient(url);\n}"]}