{"version":3,"file":"agent-registry.js","sourceRoot":"","sources":["../../src/ai/agent-registry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAEzD,MAAM,OAAO,aAAa;IAIxB;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,WAAW;QAChB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC5B,aAAa,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;QAC/C,CAAC;QACD,OAAO,aAAa,CAAC,QAAQ,CAAC;IAChC,CAAC;IAED,aAAa,CAAC,IAAY,EAAE,MAA4B;QACtD,MAAM,eAAe,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7B,OAAO,KAAK,CAAC;IACf,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,iBAAiB,CAAC,CAAC;QAClD,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,mBAAmB,CAAC,IAAY,EAAE,MAAmB;QAC3D,yDAAyD;QACzD,OAAO;YACL,IAAI;YACJ,MAAM;YACN,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC;SAClD,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { AgentConfig, AgentConfigSchema } from \"./types\";\n\nexport class AgentRegistry {\n  private static instance: AgentRegistry;\n  private agents: Map<string, any>;\n\n  private constructor() {\n    this.agents = new Map();\n  }\n\n  static getInstance(): AgentRegistry {\n    if (!AgentRegistry.instance) {\n      AgentRegistry.instance = new AgentRegistry();\n    }\n    return AgentRegistry.instance;\n  }\n\n  registerAgent(name: string, config: Partial<AgentConfig>) {\n    const validatedConfig = AgentConfigSchema.parse(config);\n    const agent = this.createAgentInstance(name, validatedConfig);\n    this.agents.set(name, agent);\n    return agent;\n  }\n\n  getAgent(name: string) {\n    const agent = this.agents.get(name);\n    if (!agent) {\n      throw new Error(`Agent ${name} not registered`);\n    }\n    return agent;\n  }\n\n  private createAgentInstance(name: string, config: AgentConfig) {\n    // Implementation will vary based on actual agent classes\n    return {\n      name,\n      config,\n      process: () => Promise.resolve(\"Not implemented\"),\n    };\n  }\n}\n"]}