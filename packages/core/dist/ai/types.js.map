{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/ai/types.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from \"zod\";\n\n// Agent Types\nexport enum DentalAgentType {\n  BRAIN_CONSULTANT = \"BRAIN_CONSULTANT\",\n  DATA_RETRIEVAL = \"DATA_RETRIEVAL\",\n  PROFITABILITY = \"PROFITABILITY\",\n  ANALYSIS = \"ANALYSIS\",\n  PATIENT_CARE = \"PATIENT_CARE\",\n  OPERATIONS = \"OPERATIONS\",\n}\n\n// Agent Configuration\nexport const AgentConfigSchema = z.object({\n  model: z.string().default(\"gpt-4-turbo-preview\"),\n  temperature: z.number().min(0).max(2).default(0.7),\n  maxTokens: z.number().positive().default(1000),\n  systemPrompt: z.string().default(\"You are a dental health AI assistant\"),\n});\n\nexport type AgentConfig = z.infer<typeof AgentConfigSchema>;\n\n// Agent Context\nexport interface AgentContext {\n  patientId?: string;\n  sessionId?: string;\n  metadata?: Record<string, unknown>;\n}\n\n// Message Types\nexport const AgentMessageSchema = z.object({\n  role: z.enum([\"user\", \"assistant\", \"system\"]),\n  content: z.string(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport type AgentMessage = z.infer<typeof AgentMessageSchema>;\n\n// Response Types\nexport const AgentResponseSchema = z.object({\n  content: z.string(),\n  tokens: z.number().nonnegative(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport type AgentResponse = z.infer<typeof AgentResponseSchema>;\n\n// Thread Types\nexport const ThreadMessageSchema = z.object({\n  id: z.string(),\n  threadId: z.string(),\n  role: z.enum([\"user\", \"assistant\"]),\n  content: z.string(),\n  createdAt: z.date().optional(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport type ThreadMessage = z.infer<typeof ThreadMessageSchema>;\n\n// Assistant Types\nexport const AssistantMessageSchema = z.object({\n  role: z.enum([\"user\", \"assistant\"]),\n  content: z.string(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport type AssistantMessage = z.infer<typeof AssistantMessageSchema>;\n\nexport const AssistantResponseSchema = z.object({\n  content: z.string(),\n  metadata: z.object({\n    usage: z.object({\n      total_tokens: z.number(),\n      completion_tokens: z.number().optional(),\n      prompt_tokens: z.number().optional(),\n    }),\n    model: z.string(),\n  }),\n});\n\nexport type AssistantResponse = z.infer<typeof AssistantResponseSchema>;\n"]}