{"version":3,"file":"service.js","sourceRoot":"","sources":["../../../src/edge-functions/media/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { handleMediaError } from './error';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { mediaConfig } from './config';\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport type { ImageProcessingOptions, MediaData, MediaOptions, ProcessedMedia, MediaProcessingResult, MediaStorageOptions } from './types';\r\nimport { edgeCache } from '../../utils/cache';\r\nimport { MonitoringService } from '../../services/monitoring';\r\nimport sharp from 'sharp';\r\nimport ffmpeg from 'fluent-ffmpeg';\r\nimport { Readable } from 'stream';\r\n\r\nconst instances = process.env.EDGE_INSTANCES ? parseInt(process.env.EDGE_INSTANCES) : 1;\r\nlet currentInstance = 0;\r\n\r\nasync function processImage(\r\n  url: string,\r\n  options: ImageProcessingOptions\r\n): Promise<Buffer> {\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch image: ${response.statusText}`);\r\n    }\r\n\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    const buffer = Buffer.from(arrayBuffer);\r\n\r\n    let image = sharp(buffer);\r\n    \r\n    if (options.width || options.height) {\r\n      image = image.resize(options.width, options.height, {\r\n        fit: options.fit || 'cover',\r\n        position: options.position || 'center'\r\n      });\r\n    }\r\n\r\n    if (options.resize) {\r\n      image = image.resize(options.resize.width, options.resize.height, {\r\n        fit: options.resize.fit || 'cover'\r\n      });\r\n    }\r\n\r\n    if (options.crop) {\r\n      image = image.extract({\r\n        left: options.crop.x,\r\n        top: options.crop.y,\r\n        width: options.crop.width,\r\n        height: options.crop.height\r\n      });\r\n    }\r\n\r\n    if (options.rotate) {\r\n      image = image.rotate(options.rotate);\r\n    }\r\n\r\n    if (options.effect) {\r\n      switch (options.effect) {\r\n        case 'grayscale':\r\n          image = image.grayscale();\r\n          break;\r\n        case 'sepia':\r\n          image = image.tint({ r: 112, g: 66, b: 20 });\r\n          break;\r\n        case 'blur':\r\n          image = image.blur(10);\r\n          break;\r\n      }\r\n    }\r\n\r\n    return image\r\n      .toFormat(options.format || 'jpeg', {\r\n        quality: options.quality || 80,\r\n        progressive: options.progressive || true\r\n      })\r\n      .toBuffer();\r\n  } catch (error) {\r\n    throw handleMediaError(error, 'IMAGE_PROCESSING_FAILED');\r\n  }\r\n}\r\n\r\nasync function processVideo(url: string): Promise<Buffer> {\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch video: ${response.statusText}`);\r\n    }\r\n    \r\n    if (!response.body) {\r\n      throw new Error('No video data received');\r\n    }\r\n    \r\n    const chunks: Buffer[] = [];\r\n    const reader = response.body.getReader();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const stream = new Readable({\r\n        async read() {\r\n          try {\r\n            const { done, value } = await reader.read();\r\n            if (done) {\r\n              this.push(null);\r\n              return;\r\n            }\r\n            this.push(value);\r\n          } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n              this.destroy(error);\r\n            } else {\r\n              this.destroy(new Error(String(error)));\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      ffmpeg(stream)\r\n        .outputFormat('mp4')\r\n        .videoCodec('libx264')\r\n        .audioCodec('aac')\r\n        .on('error', (err) => {\r\n          reject(handleMediaError(err, 'VIDEO_PROCESSING_FAILED'));\r\n        })\r\n        .on('end', () => {\r\n          resolve(Buffer.concat(chunks));\r\n        })\r\n        .pipe()\r\n        .on('data', (chunk) => {\r\n          chunks.push(chunk);\r\n        });\r\n    });\r\n  } catch (error) {\r\n    throw handleMediaError(error, 'VIDEO_PROCESSING_FAILED');\r\n  }\r\n}\r\n\r\nasync function storeMedia(\r\n  buffer: Buffer,\r\n  options: MediaStorageOptions\r\n): Promise<string> {\r\n  try {\r\n    // Mock implementation for storing media\r\n    const mediaId = uuidv4();\r\n    const filePath = path.join(options.path, `${mediaId}.${options.path.split('.').pop()}`);\r\n    await fs.writeFile(filePath, buffer);\r\n    return `file://${filePath}`;\r\n  } catch (error) {\r\n    throw handleMediaError(error, 'MEDIA_STORAGE_FAILED');\r\n  }\r\n}\r\n\r\nexport async function processMedia(\r\n  data: MediaData,\r\n  options: MediaOptions\r\n): Promise<MediaProcessingResult> {\r\n  const cacheKey = `media-${JSON.stringify(data)}-${JSON.stringify(options)}`;\r\n  const start = Date.now();\r\n  return edgeCache.get(cacheKey, async () => {\r\n    try {\r\n      const mediaId = uuidv4();\r\n      const config = options.config || {\r\n        imageProvider: 'cloudinary',\r\n      };\r\n\r\n      let buffer: Buffer;\r\n      if (data.type === 'image') {\r\n        buffer = await processImage(data.url, data.options || {});\r\n      } else if (data.type === 'video') {\r\n        buffer = await processVideo(data.url);\r\n      } else {\r\n        throw handleMediaError(\r\n          new Error(`Unsupported media type: ${data.type}`),\r\n          'UNSUPPORTED_MEDIA_TYPE'\r\n        );\r\n      }\r\n\r\n      let url: string = '';\r\n      if (options.storage) {\r\n        url = await storeMedia(buffer, {\r\n          ...options.storage,\r\n          path: options.storage.path || 'media',\r\n        });\r\n      }\r\n\r\n      const media: ProcessedMedia = {\r\n        mediaId,\r\n        url,\r\n        type: data.type,\r\n        format: data.type === 'image' ? (data.options?.format || 'jpeg') : 'mp4',\r\n        size: buffer.length,\r\n        createdAt: new Date().toISOString(),\r\n        metadata: data.metadata,\r\n      };\r\n\r\n      MonitoringService.logEdgeFunction('processMedia', 'success', Date.now() - start);\r\n\r\n      return {\r\n        success: true,\r\n        media,\r\n      };\r\n    } catch (error) {\r\n      MonitoringService.logEdgeFunction('processMedia', 'error', Date.now() - start);\r\n      return {\r\n        success: false,\r\n        error: handleMediaError(error, 'MEDIA_PROCESSING_FAILED'),\r\n      };\r\n    }\r\n  });\r\n}"]}