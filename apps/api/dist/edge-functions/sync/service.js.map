{"version":3,"file":"service.js","sourceRoot":"","sources":["../../../src/edge-functions/sync/service.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAC1C,OAAO,EAAE,EAAE,IAAI,MAAM,EAAE,MAAM,MAAM,CAAC;AAEpC,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAE9D,mDAAmD;AACnD,KAAK,UAAU,YAAY,CACzB,OAA4B,EAC5B,MAAW;IAEX,IAAI,CAAC;QACH,mDAAmD;QACnD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAClD,OAAO;YACL,MAAM,EAAE,SAAS;YACjB,YAAY,EAAE,EAAE;SACjB,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,eAAe,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC;IACvD,CAAC;AACH,CAAC;AAED,mDAAmD;AACnD,KAAK,UAAU,YAAY,CACzB,OAA4B,EAC5B,MAAW;IAEX,IAAI,CAAC;QACH,mDAAmD;QACnD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAClD,OAAO;YACL,MAAM,EAAE,SAAS;YACjB,cAAc,EAAE,EAAE;SACnB,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,eAAe,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC;IACvD,CAAC;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,IAAc,EACd,OAAoB;IAEpB,MAAM,QAAQ,GAAG,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;IAC3E,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,OAAO,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;QACxC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;YACxB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI;gBAC/B,gBAAgB,EAAE,QAAQ;gBAC1B,gBAAgB,EAAE,QAAQ;aAC3B,CAAC;YAEF,IAAI,gBAAqB,CAAC;YAC1B,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBAC7B,gBAAgB,GAAG,MAAM,YAAY,CACnC,IAAI,CAAC,OAA8B,EACnC,MAAM,CACP,CAAC;YACJ,CAAC;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBACpC,gBAAgB,GAAG,MAAM,YAAY,CACnC,IAAI,CAAC,OAA8B,EACnC,MAAM,CACP,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,MAAM,eAAe,CACnB,IAAI,KAAK,CAAC,0BAA0B,IAAI,CAAC,IAAI,EAAE,CAAC,EAChD,uBAAuB,CACxB,CAAC;YACJ,CAAC;YAED,iBAAiB,CAAC,eAAe,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC;YAEhF,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,MAAM;gBACN,gBAAgB;aACjB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,iBAAiB,CAAC,eAAe,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC;YAC9E,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,eAAe,CAAC,KAAK,EAAE,aAAa,CAAC;aAC7C,CAAC;QACJ,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\r\n  SyncData,\r\n  SyncOptions,\r\n  SyncResult,\r\n  CalendarSyncOptions,\r\n  ContactsSyncOptions,\r\n} from './types';\r\nimport { handleSyncError } from './error';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { syncConfig } from './config';\r\nimport { edgeCache } from '../../utils/cache';\r\nimport { MonitoringService } from '../../services/monitoring';\r\n\r\n// Mock implementation for calendar synchronization\r\nasync function syncCalendar(\r\n  options: CalendarSyncOptions,\r\n  config: any\r\n): Promise<any> {\r\n  try {\r\n    // Mock implementation for calendar synchronization\r\n    console.log('Syncing calendar:', options, config);\r\n    return {\r\n      status: 'success',\r\n      syncedEvents: [],\r\n    };\r\n  } catch (error) {\r\n    throw handleSyncError(error, 'CALENDAR_SYNC_FAILED');\r\n  }\r\n}\r\n\r\n// Mock implementation for contacts synchronization\r\nasync function syncContacts(\r\n  options: ContactsSyncOptions,\r\n  config: any\r\n): Promise<any> {\r\n  try {\r\n    // Mock implementation for contacts synchronization\r\n    console.log('Syncing contacts:', options, config);\r\n    return {\r\n      status: 'success',\r\n      syncedContacts: [],\r\n    };\r\n  } catch (error) {\r\n    throw handleSyncError(error, 'CONTACTS_SYNC_FAILED');\r\n  }\r\n}\r\n\r\nexport async function synchronize(\r\n  data: SyncData,\r\n  options: SyncOptions\r\n): Promise<SyncResult> {\r\n  const cacheKey = `sync-${JSON.stringify(data)}-${JSON.stringify(options)}`;\r\n  const start = Date.now();\r\n  return edgeCache.get(cacheKey, async () => {\r\n    try {\r\n      const syncId = uuidv4();\r\n      const config = options.config || {\r\n        calendarProvider: 'google',\r\n        contactsProvider: 'google',\r\n      };\r\n\r\n      let providerResponse: any;\r\n      if (data.type === 'calendar') {\r\n        providerResponse = await syncCalendar(\r\n          data.options as CalendarSyncOptions,\r\n          config\r\n        );\r\n      } else if (data.type === 'contacts') {\r\n        providerResponse = await syncContacts(\r\n          data.options as ContactsSyncOptions,\r\n          config\r\n        );\r\n      } else {\r\n        throw handleSyncError(\r\n          new Error(`Unsupported sync type: ${data.type}`),\r\n          'UNSUPPORTED_SYNC_TYPE'\r\n        );\r\n      }\r\n\r\n      MonitoringService.logEdgeFunction('synchronize', 'success', Date.now() - start);\r\n\r\n      return {\r\n        success: true,\r\n        syncId,\r\n        providerResponse,\r\n      };\r\n    } catch (error) {\r\n      MonitoringService.logEdgeFunction('synchronize', 'error', Date.now() - start);\r\n      return {\r\n        success: false,\r\n        error: handleSyncError(error, 'SYNC_FAILED'),\r\n      };\r\n    }\r\n  });\r\n}"]}