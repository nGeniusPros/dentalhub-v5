{"version":3,"file":"service.js","sourceRoot":"","sources":["../../../src/edge-functions/notifications/service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  NotificationData,\r\n  NotificationOptions,\r\n  NotificationResult,\r\n  EmailOptions,\r\n  SmsOptions,\r\n  NotificationConfig,\r\n} from './types';\r\nimport { handleNotificationError } from './error';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { notificationConfig } from './config';\r\nimport { createTransport } from 'nodemailer';\r\nimport { Twilio } from 'twilio';\r\n\r\n// Mock implementation for email sending\r\nasync function sendEmail(options: EmailOptions, config: NotificationConfig): Promise<any> {\r\n  try {\r\n    if (config.emailProvider === 'smtp') {\r\n      const transporter = createTransport({\r\n        host: process.env.SMTP_HOST,\r\n        port: parseInt(process.env.SMTP_PORT || '587'),\r\n        secure: process.env.SMTP_SECURE === 'true',\r\n        auth: {\r\n          user: process.env.SMTP_USER,\r\n          pass: process.env.SMTP_PASSWORD,\r\n        },\r\n      });\r\n\r\n      const info = await transporter.sendMail({\r\n        from: options.from || process.env.SMTP_FROM_EMAIL,\r\n        to: options.to,\r\n        subject: options.subject,\r\n        text: options.text,\r\n        html: options.html,\r\n      });\r\n      return info;\r\n    } else {\r\n      // Mock implementation for other email providers\r\n      console.log('Sending email:', options);\r\n      return {\r\n        messageId: uuidv4(),\r\n        status: 'sent',\r\n      };\r\n    }\r\n  } catch (error) {\r\n    throw handleNotificationError(error, 'EMAIL_SEND_FAILED');\r\n  }\r\n}\r\n\r\n// Mock implementation for SMS sending\r\nasync function sendSms(options: SmsOptions, config: NotificationConfig): Promise<any> {\r\n  try {\r\n    if (config.smsProvider === 'twilio') {\r\n      const client = new Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);\r\n      const message = await client.messages.create({\r\n        body: options.text,\r\n        from: options.from || process.env.TWILIO_FROM_NUMBER,\r\n        to: Array.isArray(options.to) ? options.to[0] : options.to, // Convert array to single string for Twilio\r\n      });\r\n      return message;\r\n    } else {\r\n      // Mock implementation for other SMS providers\r\n      console.log('Sending SMS:', options);\r\n      return {\r\n        messageId: uuidv4(),\r\n        status: 'sent',\r\n      };\r\n    }\r\n  } catch (error) {\r\n    throw handleNotificationError(error, 'SMS_SEND_FAILED');\r\n  }\r\n}\r\n\r\nexport async function sendNotification(\r\n  data: NotificationData,\r\n  options: NotificationOptions\r\n): Promise<NotificationResult> {\r\n  try {\r\n    const notificationId = uuidv4();\r\n    const config = options.config || {\r\n      emailProvider: 'smtp',\r\n      smsProvider: 'twilio',\r\n    };\r\n\r\n    let providerResponse: any;\r\n    if (data.type === 'email') {\r\n      providerResponse = await sendEmail(data.options as EmailOptions, config);\r\n    } else if (data.type === 'sms') {\r\n      providerResponse = await sendSms(data.options as SmsOptions, config);\r\n    } else {\r\n      throw handleNotificationError(\r\n        new Error(`Unsupported notification type: ${data.type}`),\r\n        'UNSUPPORTED_NOTIFICATION_TYPE'\r\n      );\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      notificationId,\r\n      providerResponse,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: handleNotificationError(error, 'NOTIFICATION_SEND_FAILED'),\r\n    };\r\n  }\r\n}"]}