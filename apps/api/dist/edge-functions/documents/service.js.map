{"version":3,"file":"service.js","sourceRoot":"","sources":["../../../src/edge-functions/documents/service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  DocumentData,\r\n  DocumentGenerationOptions,\r\n  GeneratedDocument,\r\n  DocumentGenerationResult,\r\n  DocumentTemplate,\r\n  DocumentStorageOptions,\r\n} from './types';\r\nimport { handleDocumentError } from './error';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Document } from 'pdfmake-wrapper';\r\nimport { TDocumentDefinitions } from 'pdfmake/interfaces';\r\nimport { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport { edgeCache } from '../../utils/cache';\r\n\r\n// Mock implementation for document generation\r\nasync function generatePdf(data: DocumentData, config: any): Promise<Buffer> {\r\n  try {\r\n    const document = new Document(\r\n      {\r\n        content: [\r\n          { text: `Document Type: ${data.type}`, style: 'header' },\r\n          { text: `Template ID: ${data.templateId}`, style: 'subheader' },\r\n          { text: `Data: ${JSON.stringify(data.data, null, 2)}`, style: 'body' },\r\n        ],\r\n        styles: {\r\n          header: { fontSize: 20, bold: true, margin: [0, 0, 0, 10] },\r\n          subheader: { fontSize: 16, bold: true, margin: [0, 0, 0, 5] },\r\n          body: { fontSize: 12, margin: [0, 0, 0, 5] },\r\n        },\r\n      } as TDocumentDefinitions\r\n    );\r\n\r\n    return await document.toBuffer();\r\n  } catch (error) {\r\n    throw handleDocumentError(error, 'PDF_GENERATION_FAILED');\r\n  }\r\n}\r\n\r\nasync function generateDocx(data: DocumentData, config: any): Promise<Buffer> {\r\n  try {\r\n    // Mock implementation for DOCX generation\r\n    const docxContent = `\r\n      <w:document xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\">\r\n        <w:body>\r\n          <w:p><w:r><w:t>Document Type: ${data.type}</w:t></w:r></w:p>\r\n          <w:p><w:r><w:t>Template ID: ${data.templateId}</w:t></w:r></w:p>\r\n          <w:p><w:r><w:t>Data: ${JSON.stringify(data.data, null, 2)}</w:t></w:r></w:p>\r\n        </w:body>\r\n      </w:document>\r\n    `;\r\n    return Buffer.from(docxContent, 'utf-8');\r\n  } catch (error) {\r\n    throw handleDocumentError(error, 'DOCX_GENERATION_FAILED');\r\n  }\r\n}\r\n\r\nasync function storeDocument(\r\n  buffer: Buffer,\r\n  options: DocumentStorageOptions\r\n): Promise<string> {\r\n  try {\r\n    // Mock implementation for storing document\r\n    const documentId = uuidv4();\r\n    const filePath = path.join(options.path, `${documentId}.${options.path.split('.').pop()}`);\r\n    await fs.writeFile(filePath, buffer);\r\n    return `file://${filePath}`;\r\n  } catch (error) {\r\n    throw handleDocumentError(error, 'DOCUMENT_STORAGE_FAILED');\r\n  }\r\n}\r\n\r\nexport async function generateDocument(\r\n  data: DocumentData,\r\n  options: DocumentGenerationOptions\r\n): Promise<DocumentGenerationResult> {\r\n  const cacheKey = generateDocumentCacheKey(data, options);\r\n  \r\n  return edgeCache.get(cacheKey, async () => {\r\n    try {\r\n      const documentId = uuidv4();\r\n      const config = options.config || {\r\n\t\t\t\t\t\t\t\toutputFormat: 'pdf',\r\n        template: 'default',\r\n      };\r\n\r\n      let buffer: Buffer;\r\n      if (config.outputFormat === 'pdf') {\r\n        buffer = await generatePdf(data, config);\r\n      } else if (config.outputFormat === 'docx') {\r\n        buffer = await generateDocx(data, config);\r\n      } else {\r\n        throw handleDocumentError(\r\n          new Error(`Unsupported output format: ${config.outputFormat}`),\r\n\t\t\t\t\t\t\t\t\t\t'UNSUPPORTED_FORMAT'\r\n        );\r\n      }\r\n\r\n      let url: string = '';\r\n      if (options.storage) {\r\n        url = await storeDocument(buffer, {\r\n          ...options.storage,\r\n\t\t\t\t\t\t\t\t\t\tpath: options.storage.path || 'documents',\r\n        });\r\n      }\r\n\r\n      const document: GeneratedDocument = {\r\n        documentId,\r\n        url,\r\n        type: data.type,\r\n        format: config.outputFormat,\r\n        size: buffer.length,\r\n\t\t\t\t\t\t\t\tcreatedAt: new Date().toISOString(),\r\n        metadata: data.metadata,\r\n      };\r\n\r\n      return {\r\n        success: true,\r\n        document,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n\t\t\t\t\t\t\t\terror: handleDocumentError(error, 'DOCUMENT_GENERATION_FAILED'),\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t});\r\n}\r\n\r\nexport async function getDocumentTemplate(templateId: string): Promise<DocumentTemplate> {\r\n  const cacheKey = `documentTemplate-${templateId}`;\r\n  return edgeCache.get(cacheKey, async () => {\r\n    try {\r\n      // Mock implementation for retrieving document template\r\n      return {\r\n        id: templateId,\r\n        name: 'Default Template',\r\n        type: 'default',\r\n        version: '1.0',\r\n        content: '<h1>Default Template</h1>',\r\n        variables: ['patientName', 'appointmentDate'],\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n    } catch (error) {\r\n\t\t\t\t\t\tthrow handleDocumentError(error, 'TEMPLATE_RETRIEVAL_FAILED');\r\n\t\t\t\t}\r\n\t\t});\r\n}\r\n\r\n// Helper function to generate cache key for documents\r\nfunction generateDocumentCacheKey(data: DocumentData, options: DocumentGenerationOptions): string {\r\n\t\tconst key = {\r\n\t\t\t\ttype: data.type,\r\n\t\t\t\ttemplateId: data.templateId,\r\n\t\t\t\tdata: data.data,\r\n\t\t\t\tformat: options.config?.outputFormat || 'pdf',\r\n\t\t};\r\n\t\treturn `document-${JSON.stringify(key)}`;\r\n}"]}