{"version":3,"file":"errors.js","sourceRoot":"","sources":["errors.ts"],"names":[],"mappings":"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","sourcesContent":["import { DentalAgentType } from './agent-types';\n\n// Base error class for all AI agent errors\nexport class AgentError extends Error {\n  constructor(\n    message: string,\n    public agentType: DentalAgentType,\n    public code: string,\n    public retryable: boolean,\n    public underlying?: Error\n  ) {\n    super(message);\n    this.name = 'AgentError';\n  }\n}\n\n// OpenAI specific error types\nexport class OpenAIError extends AgentError {\n  constructor(\n    message: string,\n    agentType: DentalAgentType,\n    code: OpenAIErrorCode,\n    retryable: boolean,\n    public status: number,\n    underlying?: Error\n  ) {\n    super(message, agentType, code, retryable, underlying);\n    this.name = 'OpenAIError';\n  }\n}\n\n// OpenAI error codes based on their API documentation\nexport enum OpenAIErrorCode {\n  // Authentication/Authorization\n  INVALID_AUTH = 'invalid_authentication',\n  INVALID_API_KEY = 'invalid_api_key',\n  NO_PERMISSION = 'permission_denied',\n  ORG_NOT_FOUND = 'organization_not_found',\n\n  // Rate Limits\n  RATE_LIMIT = 'rate_limit_exceeded',\n  QUOTA_EXCEEDED = 'quota_exceeded',\n  ENGINE_OVERLOADED = 'server_overloaded',\n\n  // Invalid Requests\n  INVALID_REQUEST = 'invalid_request',\n  MODEL_NOT_FOUND = 'model_not_found',\n  VALIDATION_ERROR = 'validation_error',\n  CONTENT_POLICY = 'content_policy_violation',\n  MAX_TOKENS = 'max_tokens_exceeded',\n  CONTEXT_LENGTH = 'context_length_exceeded',\n\n  // Server Errors\n  API_ERROR = 'api_error',\n  TIMEOUT = 'timeout',\n  SERVICE_UNAVAILABLE = 'service_unavailable'\n}\n\n// Sikka API specific error codes\nexport enum SikkaErrorCode {\n  // Authentication\n  INVALID_TOKEN = 'invalid_token',\n  TOKEN_EXPIRED = 'token_expired',\n  INVALID_CREDENTIALS = 'invalid_credentials',\n  \n  // Authorization\n  UNAUTHORIZED = 'unauthorized',\n  INSUFFICIENT_SCOPE = 'insufficient_scope',\n  \n  // Resource Errors\n  RESOURCE_NOT_FOUND = 'resource_not_found',\n  PRACTICE_NOT_FOUND = 'practice_not_found',\n  INVALID_PRACTICE_ID = 'invalid_practice_id',\n  \n  // Rate Limiting\n  API_RATE_LIMIT = 'api_rate_limit',\n  CONCURRENT_REQUEST_LIMIT = 'concurrent_request_limit',\n  \n  // Request Errors\n  INVALID_REQUEST = 'invalid_request',\n  INVALID_PARAMETERS = 'invalid_parameters',\n  VALIDATION_ERROR = 'validation_error',\n  \n  // Server Errors\n  SERVER_ERROR = 'server_error',\n  SERVICE_UNAVAILABLE = 'service_unavailable',\n  GATEWAY_TIMEOUT = 'gateway_timeout'\n}\n\n// Sikka API error interface\nexport interface SikkaErrorDetails {\n  requestId?: string;\n  statusCode?: number;\n  retryAfter?: number;\n  path?: string;\n  timestamp?: string;\n  [key: string]: any;\n}\n\n// Sikka API error class\nexport class SikkaApiError extends AgentError {\n  constructor(\n    message: string,\n    agentType: DentalAgentType,\n    code: SikkaErrorCode,\n    retryable: boolean,\n    public details: SikkaErrorDetails,\n    underlying?: Error\n  ) {\n    super(message, agentType, code, retryable, underlying);\n    this.name = 'SikkaApiError';\n  }\n}\n\n// Specific Sikka error types\nexport class SikkaAuthenticationError extends SikkaApiError {\n  constructor(\n    message: string,\n    agentType: DentalAgentType,\n    details: SikkaErrorDetails,\n    underlying?: Error\n  ) {\n    super(\n      message,\n      agentType,\n      SikkaErrorCode.INVALID_TOKEN,\n      false,\n      details,\n      underlying\n    );\n    this.name = 'SikkaAuthenticationError';\n  }\n}\n\nexport class SikkaRateLimitError extends SikkaApiError {\n  constructor(\n    message: string,\n    agentType: DentalAgentType,\n    details: SikkaErrorDetails,\n    underlying?: Error\n  ) {\n    super(\n      message,\n      agentType,\n      SikkaErrorCode.API_RATE_LIMIT,\n      true,\n      details,\n      underlying\n    );\n    this.name = 'SikkaRateLimitError';\n  }\n}\n\n// Helper function to determine if a Sikka error is retryable\nexport function isSikkaErrorRetryable(code: SikkaErrorCode): boolean {\n  return [\n    SikkaErrorCode.API_RATE_LIMIT,\n    SikkaErrorCode.CONCURRENT_REQUEST_LIMIT,\n    SikkaErrorCode.SERVICE_UNAVAILABLE,\n    SikkaErrorCode.GATEWAY_TIMEOUT,\n    SikkaErrorCode.SERVER_ERROR\n  ].includes(code);\n}\n\n// Network related errors\nexport class NetworkError extends AgentError {\n  constructor(\n    agentType: DentalAgentType,\n    message: string = 'Network request failed',\n    underlying?: Error\n  ) {\n    super(message, agentType, 'NETWORK_ERROR', true, underlying);\n    this.name = 'NetworkError';\n  }\n}\n\n// Rate limiting errors\nexport class RateLimitError extends AgentError {\n  constructor(\n    agentType: DentalAgentType,\n    public retryAfter?: number,\n    message: string = 'Rate limit exceeded'\n  ) {\n    super(message, agentType, 'RATE_LIMIT', true);\n    this.name = 'RateLimitError';\n  }\n}\n\n// Validation errors\nexport class ValidationError extends AgentError {\n  constructor(\n    message: string,\n    agentType: DentalAgentType,\n    public field?: string\n  ) {\n    super(message, agentType, 'VALIDATION_ERROR', false);\n    this.name = 'ValidationError';\n  }\n}\n\n// Helper function to determine if an error is retryable\nexport function isRetryableError(error: Error): boolean {\n  if (error instanceof AgentError) {\n    return error.retryable;\n  }\n  // Network errors are generally retryable\n  return error instanceof TypeError || error.name === 'NetworkError';\n}\n\n// Helper function to convert OpenAI API errors\nexport function convertOpenAIError(\n  error: any,\n  agentType: DentalAgentType\n): AgentError {\n  if (!error.response) {\n    return new NetworkError(agentType, error.message, error);\n  }\n\n  const { status, data } = error.response;\n  const code = data?.error?.code || data?.error?.type;\n  const message = data?.error?.message || 'Unknown OpenAI error';\n\n  // Determine if the error is retryable\n  const retryable = status === 429 || status >= 500;\n\n  switch (code) {\n    case 'rate_limit_exceeded':\n      return new RateLimitError(\n        agentType,\n        parseInt(error.response.headers['retry-after']),\n        message\n      );\n    \n    case 'invalid_api_key':\n    case 'permission_denied':\n      return new OpenAIError(\n        message,\n        agentType,\n        code as OpenAIErrorCode,\n        false,\n        status,\n        error\n      );\n    \n    case 'context_length_exceeded':\n    case 'max_tokens_exceeded':\n      return new ValidationError(message, agentType, 'tokens');\n    \n    default:\n      return new OpenAIError(\n        message,\n        agentType,\n        (code as OpenAIErrorCode) || OpenAIErrorCode.API_ERROR,\n        retryable,\n        status,\n        error\n      );\n  }\n}\n\n// Helper to create error response objects\nexport interface ErrorResponse {\n  error: {\n    code: string;\n    message: string;\n    retryable: boolean;\n    details?: Record<string, any>;\n  };\n}\n\nexport function createErrorResponse(error: Error): ErrorResponse {\n  if (error instanceof AgentError) {\n    return {\n      error: {\n        code: error.code,\n        message: error.message,\n        retryable: error.retryable,\n        details: error instanceof OpenAIError ? { status: error.status } : undefined\n      }\n    };\n  }\n  \n  return {\n    error: {\n      code: 'UNKNOWN_ERROR',\n      message: error.message || 'An unknown error occurred',\n      retryable: isRetryableError(error)\n    }\n  };\n}\n"]}